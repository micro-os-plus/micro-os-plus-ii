/**

\page howtotest How to test
\tableofcontents

If testing software is generally a delicate issue, testing embedded
software is an even more complicated matter, since images must be 
written into embedded processor flash and some form of interaction
with the hardware is needed to validate the software behaviour.

In order to simplify things, one of the early µOS++ design decision was
to include a POSIX synthetic platform,
running on OS X and GNU/Linux. In this configuration, each µOS++
application is executed within the context of a POSIX process, running
as a command line application.

Each test is compiled in multiple configurations, with various
toolchains, with 32/64 bit, for Debug or Release.

To run all available tests, a script (`runTests.sh`) is available
in the `/scripts` folder.

\section prereq Prerequisites
\subsection linux GNU/Linux

Currently all tests are periodically checked on the 64 bit version of
Ubuntu 12.10, using the default 
GCC 4.7 compiler, but it is expected that any other modern distribution 
will run them as well. 

The prerequisites for running the tests on Ubuntu are:

\verbatim
sudo apt-get install git
sudo apt-get install gcc gcc-multilib g++ g++-multilib
sudo apt-get install python
\endverbatim

To check if the correct compiler is available, run:
\verbatim
g++ --version
\endverbatim

The result should look like:
\verbatim
g++ (Ubuntu/Linaro 4.7.2-2ubuntu1) 4.7.2
\endverbatim


\subsection osx OS X

As the main µOS++ development platform, even more tests are available 
on OS X.

For the tests running on the synthetic POSIX platform, the following 
compilers are used:
- Apple clang (LLVM 3.2)
- Mac Ports GCC 4.6.3
- Mac Ports GCC 4.7.2

With all compilers both the 32 and 64 bit versions are checked, in both the
Debug and Release configurations, amounting to 12 versions for each test.

The prerequisites for running the tests on OS X are
- <b>Xcode</b> (available from the App Store)
- <b>Command Line Tools</b> (optional package, installed from within Xcode)
- <b>Mac Ports</b>

Please note that, by default, in the Mac Ports framework, the compilers support 
only the 64 bit targets.
To support both the 32 and 64 bit targets, the `+universal` option must 
be used when installing the toolchains:

\verbatim
sudo port install gcc46 +universal
sudo port install gcc47 +universal
\endverbatim

The toolchain binaries are available in `/opt/local/bin/` as:
- g++-mp-4.6
- g++-mp-4.7

The `git` executables are installed via the `Command Line Tools` 
package provided (freely) by Apple.

For reference, here is the `git` global configuration that I use:

\verbatim
git config --global user.name "Liviu Ionescu"
git config --global user.email ilg@livius.net

git config --global core.filemode false
git config --global core.autocrlf input

git config --global core.whitespace trailing-space,space-before-tab

git config --global core.editor "vi"
\endverbatim

(for more details, please check the
[git documentation](http://git-scm.com/docs/git-config)).


\section run Run the tests

Once the prerequisites are satisfied, create a dedicated folder for
the tests, clone the repositories and run the script.

\note In addition to the µOS++ SE repository,
a second repository, containing the
<b>XCDL build tools</b>, is required.

\verbatim
mkdir -p work/uOS
cd work/uOS

git clone http://git.code.sf.net/p/micro-os-plus/second micro-os-plus-se.git
git clone http://git.code.sf.net/p/xcdl/python xcdl-python.git

/bin/bash micro-os-plus-se.git/scripts/runTests.sh /tmp/uOS/build
\endverbatim
or
\verbatim
/bin/bash micro-os-plus-se.git/scripts/runTests.sh
\endverbatim

\note The `runTests.sh` script accepts an optional argument, defining the 
location where the build folders will be created, in this case a 
temporary folder.

\section output Sample output

Being based on `make`, the first time when the `runtests.sh` script 
is executed, each test will first build the executable from the sources, 
then execute it. 
Running the script again will only execute the tests.

If the machine used to run this script returns `x86_64` for `uname -m`, it is
assumed to be a 64 bit machine and the 64 bit versions of all tests are
also executed.

On OS X, if `/opt/local/bin/g++-mp-4.7` exists and is executable, 
then the Mac Ports GCC 4.7
tests are included. A similar test is performed for Mac Ports GCC 4.6. 
However be sure that `+universal` was used to build these packages, 
otherwise the tests will fail to run the 32 bit executables.

The output produced by the *Debug* version of a test looks like:

\verbatim

XCDL metadata processed in 30ms.

XCDL build started, using toolchain 'OS X Apple Debug LLVM x86_64'...

cd build/osx_trace_x64_llvm_Debug
PATH=/usr/sbin:/sbin:/bin:/usr/bin

make run
Running XCDL target: trace.elf

os::diag::Trace::Trace() @00000001097BABE8

livius.net / Trace v1.1.1, Mar 30 2013 21:27:09
uOS++ v5.1.7630, clang 4.2 (clang-425.0.24) x86_64
POSIX synthetic, running on x86_64 Darwin 12.3.0

hal::posix::infra::TestSuiteImplementation::TestSuiteImplementation() @00000001097BACC0
os::infra::TestSuite::TestSuite() @00000001097BAC88

START:"Starting tests from 'portable/diagnostics/tests/src/trace.cpp'"
STAT:PASS,"All 208 checks passed! :-) "

int main(int, char **) returns 0
os::infra::TestSuite::~TestSuite() @00000001097BAC88
hal::posix::infra::TestSuiteImplementation::~TestSuiteImplementation() @00000001097BACC0
virtual os::diag::Trace::~Trace() @00000001097BABE8
Finished running target: trace.elf
 
XCDL build completed in 37ms.

\endverbatim

The output produced by the *Release* version of the same test 
is slightly less verbose:

\verbatim

XCDL metadata processed in 24ms.

XCDL build started, using toolchain 'OS X Apple Release LLVM x86_64'...

cd build/osx_trace_x64_llvm_Release
PATH=/usr/sbin:/sbin:/bin:/usr/bin

make run
Running XCDL target: trace.elf

START:"Starting tests from 'portable/diagnostics/tests/src/trace.cpp'"
STAT:PASS,"All 208 checks passed! :-) "

Finished running target: trace.elf
 
XCDL build completed in 31ms.

\endverbatim

\section xml The XML output

All tests return the FAIL information as the non-zero POSIX exit code,
so the script will break as soon as one of the tests fails.

In other words, the completion of
the `runTests.sh` is a guarantee that all tests were built without warnings
and all assertions passed.

In addition to this PASS/FAIL information, the testing framework 
is also able to generate jUnit XML files for each test, to be used in
continuous integration environments, like Jenkins.

To activate this, the `runTests.sh` script automatically adds
`-Wr,-x,junit.xml` to run builds, which will be passed by make
down to the the executable as `-x junit.xml`.

*/
